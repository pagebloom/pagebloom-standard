// -[KeepHeading]-


// -[Copyright]-

/**
 * (c) 2008,2019. Step Ahead Software Pty Ltd. All rights reserved.
 * Usage is governed by the terms of the Apache 2 License.
 * 
 * Source file created and managed by Javelin (TM) Step Ahead Software.
 * To maintain code and model synchronization you may directly edit code in method bodies
 * and any sections starting with the 'Keep_*' marker. Make all other changes via Javelin.
 * See http://stepaheadsoftware.com for more details.
 */
package com.sas.platform.pagebloom.community.app;

import java.lang.*;
import com.expojo.app.wexpojo.WexpojoApplication;


import com.sas.app.wexpojo.biz.website.IWebsiteRepository;
    
import com.sas.app.wexpojo.biz.website.Website;
    
import com.expojo.app.wexpojo.ui.session.IWexpojoSession;

import com.sas.framework.iam.authentication.expojo.ExpojoAuthenticationConfig;
import com.sas.framework.iam.authentication.expojo.SimpleAuthenticator;
import com.sas.platform.pagebloom.community.session.PagebloomCommunitySession;
    
import com.sas.app.wexpojo.biz.website.WebsiteRepository;
    

// -[KeepBeforeClass]-
import javax.servlet.ServletContext;

import org.apache.wicket.request.Request;
import org.apache.wicket.request.Response;
import org.apache.wicket.request.mapper.parameter.PageParameters;
import org.apache.wicket.markup.html.WebPage;

import com.sas.framework.system.Environment;
import com.sas.app.wexpojo.biz.website.IWebsiteBehaviour;

import com.expojo.app.wexpojo.ui.aspect.account.AccountPage;
import com.expojo.app.wexpojo.ui.aspect.landing.HomePage;
import com.expojo.app.wexpojo.ui.aspect.dashboard.DashboardPage;
import com.expojo.app.wexpojo.ui.aspect.error.ErrorPage;
import com.expojo.app.wexpojo.ui.aspect.authenticate.AuthenticatePage;


// -[Class]-

/**
 * Class Name : PagebloomCommunityApplication
 * Diagram    : App Core
 * Project    : WexPOJO - Wicket + exPOJO application core
 * Type       : concrete
 * The Wicket application object used by pagebloom community edition.
 * 
 * @author Chris Colman
 */
public 
class PagebloomCommunityApplication extends WexpojoApplication
{
// -[KeepWithinClass]-


// -[Fields]-
    
    protected WebsiteRepository websiteRepository;
    // Generated access methods for relationship: websiteRepository
    public void setWebsiteRepository(WebsiteRepository websiteRepository) { this.websiteRepository = websiteRepository; }


// -[Methods]-

/**
 * Called during app/context initialization.
 * For example this method will typically be overridden to perform the reading of parameters
 * configured in context.xml or some other config file.
 * It can be assumed that the persistence framework has not yet been initialized by the
 * time this method is called and therefore initialization of objects that can determine
 * the persistence framework initialization behaviour can occur in this method.
 */
protected void readConfigParameters(ServletContext servletContext)
{
	super.readConfigParameters(servletContext);
	
	Environment environment = Environment.get();

	Environment.InstanceType instanceType;

	String instanceTypeStr = servletContext.getInitParameter("instance.type");
	if ( instanceTypeStr == null )
	{
		// Default to productionInstance if no parameter is supplied
		instanceType = Environment.InstanceType.Production;
	}
	else
	{
		// Value only has to start with the first 3 letters of the name and is case insensitive
		instanceTypeStr = instanceTypeStr.toLowerCase();
		
		if ( instanceTypeStr.startsWith("uat") )
			instanceType = Environment.InstanceType.Uat;
		else if ( instanceTypeStr.startsWith("dev") )
			instanceType = Environment.InstanceType.Development;
		else if ( instanceTypeStr.startsWith("int") )
			instanceType = Environment.InstanceType.Integration;
		else
			instanceType = Environment.InstanceType.Production;
	}
		
	environment.setInstanceType(instanceType);
	
	// Demo mode
	String demoModeStr = servletContext.getInitParameter("demoMode");
	boolean demoMode = demoModeStr != null ? demoModeStr.equals("true") : false;
	
	environment.setDemoMode(demoMode);
	
	logger.info("Using parameter 'instance.type' = '" + environment.getInstanceType() + "'");
	logger.info("Using parameter 'demoMode' = '" + demoMode + "'");
}




/**
 * Describe here
 */
public void addWebsite(int id, String name, String subdomain, String domainName, int templateId, String theme, IWebsiteBehaviour behaviour)
{
	String hostnamePrefix = Environment.get().getHostnamePrefix();
	
	Website website = new Website(id, name, subdomain + "." + hostnamePrefix + domainName, behaviour);
	website.setTemplateId(templateId);
	website.setThemeId(theme);
	websiteRepository.addWebsite(website);

}

/**
 * Returns ErrorPage.class
 */
public Class<? extends WebPage> getErrorPage()
{
	return ErrorPage.class;
}



/**
 * Returns the home page for this application.
 */
public Class<? extends WebPage> getHomePage()
 {
	return HomePage.class;
}




/**
 * Creates and returns an instance of the application's authenticate (log in) page for
 * this application.
 * Any application is free to use whatever class for the authenticate page so long as
 * it extends WebPage.
 */
public WebPage createAuthenticatePage(PageParameters pageParameters)
{
	return new AuthenticatePage(pageParameters, AuthenticatePage.acStandard);
}

/**
 * Initializes the app post construction of the application object.
 */
public void init()
{
	super.init();

	// Configure security
	ExpojoAuthenticationConfig eac = ExpojoAuthenticationConfig.get();

	// Mount pagess
	mountPage("/authenticate", AuthenticatePage.class);
	mountPage("/dashboard", DashboardPage.class);
	mountPage("/account", AccountPage.class);
}




/**
 * Creates a new WebSession (or extended) object that implements IWexpojoSession.
 * This is called by newSession and is made abstract to enforce derived classes to create
 * a WebSession that is an implementation of IWexpojoSession.
 */
protected IWexpojoSession newWexpojoSession(Request request, Response response)
{
	return new PagebloomCommunitySession(request, response);
}

/**
 * Creates the website repository.
 */
public IWebsiteRepository getWebsiteRepository()
{
	if (websiteRepository == null)
		websiteRepository = new WebsiteRepository();
		
	return websiteRepository;
}

/**
 * Override to add websites to the repository.
 */
public void addWebsites(IWebsiteRepository websiteRepository)
{
	// You need to ensure that any domain names are appropriately mapped in either your local config for development (e.g. hosts files) or
	// external DNS servers (your domain name registry's DNS settings or your own DNS server if you host your own)
	websiteRepository.addWebsite(new Website(1, "WexPOJO Demo website", "localhost"));
}

}
